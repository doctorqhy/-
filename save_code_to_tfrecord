import tensorflow as tf
import os
import random
import sys
from PIL import Image
import numpy as np


#验证机数量
_NUM_TEST = 500

#随机种子数
_RANDOM_SEED = 0

#数据集路径
DATASET_DIR = r'D:\pycharm\PyCharm Community Edition 2017.2.3\TensorFlow\CodeDemo\captcha\images'

#tfrecord文件保存路径
TFRECORD_DIR = 'D:\pycharm\PyCharm Community Edition 2017.2.3\TensorFlow\CodeDemo\captcha'


#判断文件是否存在
def _dataset_exists(dataset_dir):

    for spilt_name in ['train','test']:

        output_filename = os.path.join(dataset_dir,spilt_name+'.tfrecords')

        if not tf.gfile.Exists(output_filename):

            return False

    return True


#得到所有图片的绝对路径
def _get_filenames_and_classes(dataset_dir):

    photo_filenames = []

    for filename in os.listdir(dataset_dir):

        #保存每一个文件的路径
        path = os.path.join(dataset_dir,filename)
        photo_filenames.append(path)

    return photo_filenames


def _int64_feature(values):

    #如果不是一个列表或者元组
    if not isinstance(values,(tuple,list)):
        values = [values]

    return tf.train.Feature(int64_list = tf.train.Int64List(value=values))


def _bytes_feature(values):

    return tf.train.Feature(bytes_list = tf.train.BytesList(value=[values]))


def image_to_tfexample(image_data,label0,label1,label2,label3):

    return tf.train.Example(features = tf.train.Features(feature = {
        'image_data':_bytes_feature(image_data),
        'label0':_int64_feature(label0),
        'label1':_int64_feature(label1),
        'label2':_int64_feature(label2),
        'label3':_int64_feature(label3),
    }))


#转化图片数据
def convert_dataset(spilt_name,filenames,dataset_dir):

    assert spilt_name in ['train','test']

    with tf.Session() as sess:

        output_filename = os.path.join(TFRECORD_DIR,spilt_name+'.tfrecords')
        with tf.python_io.TFRecordWriter(output_filename) as tfrecord_writer:

            for i,filename in enumerate(filenames):

                try:

                    sys.stdout.write('\r>>Creating image %d/%d'%(i+1,len(filenames)))
                    sys.stdout.flush()

                    image_data = Image.open(filename)
                    image_data = image_data.resize((224,224))
                    image_data = np.array(image_data.convert('L'))
                    image_data = image_data.tobytes()
                    print(sess.run(image_data))

                    labels = filename.split('\\')[-1][0:4]
                    num_labels = []

                    for j in range(4):

                        num_labels.append(int(labels[j]))

                    example = image_to_tfexample(image_data, num_labels[0],num_labels[1],num_labels[2],num_labels[3])
                    tfrecord_writer.write(example.SerializeToString())
                except IOError as e:

                    print('can not read'+filename)
                    print('Error',e)
                    print('Skip it\n')

    sys.stdout.write('\n')
    sys.stdout.flush()


if _dataset_exists(TFRECORD_DIR):
    print('tfrecord文件已存在')

else:

    photo_filenames = _get_filenames_and_classes(DATASET_DIR)

    random.seed(_RANDOM_SEED)
    #打乱顺序
    random.shuffle(photo_filenames)
    #切分训练数据和测试数据
    training_filenames = photo_filenames[_NUM_TEST:]
    test_filenames = photo_filenames[:_NUM_TEST]

    convert_dataset('train',training_filenames,DATASET_DIR)
    convert_dataset('test',test_filenames,DATASET_DIR)
    print('生成tfrecord文件')
